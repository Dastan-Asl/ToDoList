{"version":3,"sources":["Functional.js","Class.js","index.js"],"names":["List","props","useState","value","setValue","localStorage","getItem","JSON","parse","tasks","setTasks","sortByCompleted","a","b","completed","p","alignItems","spacing","borderWidth","borderRadius","id","onChange","e","target","placeholder","disabled","length","onClick","task","text","uuidv4","arr","sort","setItem","stringify","bg","map","backgroundColor","size","check","checked","index","findIndex","el","handleToggleTask","flex","style","textDecoration","fontSize","filtered","filter","handleDeleteTask","state","handleAddTask","setState","this","React","Component","to","ReactDOM","render","path","component","ListFunc","ListClass","document","getElementById"],"mappings":"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","file":"static/js/main.9144c513.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  VStack,\r\n  FormControl,\r\n  FormLabel,\r\n  HStack,\r\n  Input,\r\n  Button,\r\n  Checkbox,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst List = (props) => {\r\n  const [value, setValue] = useState(\"\");\r\n  const [tasks, setTasks] = useState(\r\n    localStorage.getItem(\"tasks\")\r\n      ? JSON.parse(localStorage.getItem(\"tasks\"))\r\n      : []\r\n  );\r\n\r\n  const handleAddTask = () => {\r\n    const task = {\r\n      text: value,\r\n      completed: false,\r\n      id: uuidv4(),\r\n    };\r\n\r\n    const arr = [...tasks, task];\r\n    setTasks(arr.sort(sortByCompleted));\r\n    setValue(\"\");\r\n    localStorage.setItem(\"tasks\", JSON.stringify(arr));\r\n  };\r\n\r\n  const handleDeleteTask = (id) => {\r\n    const arr = [...tasks];\r\n    const filtered = arr.filter((el) => el.id !== id);\r\n    setTasks(filtered.sort(sortByCompleted));\r\n    localStorage.setItem(\"tasks\", JSON.stringify(filtered));\r\n  };\r\n\r\n  const handleToggleTask = (e, id) => {\r\n    const check = e.target.checked;\r\n    const arr = [...tasks];\r\n    const index = arr.findIndex((el) => el.id === id);\r\n    arr[index].completed = check;\r\n    setTasks(arr.sort(sortByCompleted));\r\n    localStorage.setItem(\"tasks\", JSON.stringify(arr));\r\n  };\r\n\r\n  const sortByCompleted = (a, b) => {\r\n    const sortArr = a.completed - b.completed;\r\n    return sortArr;\r\n  };\r\n\r\n  return (\r\n    <Box p={20}>\r\n      <VStack alignItems=\"stretch\" spacing={5}>\r\n        <Box borderWidth={1} p={5} borderRadius=\"lg\">\r\n          <FormControl id=\"todo\">\r\n            <FormLabel>What do you want to do?</FormLabel>\r\n            <HStack>\r\n              <Input\r\n                value={value}\r\n                onChange={(e) => setValue(e.target.value)}\r\n                placeholder=\"Your next task...\"\r\n              />\r\n              <Button disabled={value.length === 0} onClick={handleAddTask}>\r\n                Submit\r\n              </Button>\r\n            </HStack>\r\n          </FormControl>\r\n        </Box>\r\n        <Box borderWidth={1} p={5} borderRadius=\"lg\" bg=\"gray.100\">\r\n          <VStack alignItems=\"stretch\">\r\n            {tasks.map((task) => {\r\n              return (\r\n                <Box\r\n                  key={task.id}\r\n                  borderWidth=\"1px\"\r\n                  backgroundColor=\"white\"\r\n                  borderRadius=\"lg\"\r\n                  p={3}\r\n                >\r\n                  <HStack spacing={3}>\r\n                    <Checkbox\r\n                      size=\"lg\"\r\n                      onChange={(e) => handleToggleTask(e, task.id)}\r\n                    />\r\n                    <Text\r\n                      flex=\"1\"\r\n                      style={{\r\n                        textDecoration: task.completed && \"line-through\",\r\n                      }}\r\n                      fontSize=\"lg\"\r\n                    >\r\n                      {task.text}\r\n                    </Text>\r\n                    <Button onClick={() => handleDeleteTask(task.id)}>\r\n                      Delete task\r\n                    </Button>\r\n                  </HStack>\r\n                </Box>\r\n              );\r\n            })}\r\n          </VStack>\r\n        </Box>\r\n      </VStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\nimport {\n  Box,\n  VStack,\n  FormControl,\n  FormLabel,\n  HStack,\n  Input,\n  Button,\n  Checkbox,\n  Text,\n} from \"@chakra-ui/react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass List extends React.Component {\n  state = {\n    value: \"\",\n    tasks: localStorage.getItem(\"tasks\")\n      ? JSON.parse(localStorage.getItem(\"tasks\"))\n      : [],\n  };\n\n  handleAddTask = () => {\n    const task = {\n      text: this.state.value,\n      completed: false,\n      id: uuidv4(),\n    };\n    const arr = [...this.state.tasks, task];\n    this.setState({ tasks: arr.sort(this.sortByCompleted), value: \"\" });\n    localStorage.setItem(\"tasks\", JSON.stringify(arr));\n  };\n\n  handleDeleteTask = (id) => {\n    const arr = [...this.state.tasks];\n    const filtered = arr.filter((el) => el.id !== id);\n    this.setState({ tasks: filtered.sort(this.sortByCompleted) });\n    localStorage.setItem(\"tasks\", JSON.stringify(filtered));\n  };\n\n  handleToggleTask = (e, id) => {\n    const check = e.target.checked;\n    const arr = [...this.state.tasks];\n    const index = arr.findIndex((el) => el.id === id);\n    arr[index].completed = check;\n    this.setState({ tasks: arr.sort(this.sortByCompleted) });\n    localStorage.setItem(\"tasks\", JSON.stringify(arr));\n  };\n\n  sortByCompleted = (a, b) => {\n    const sortArr = a.completed - b.completed;\n    return sortArr;\n  };\n\n  render() {\n    return (\n      <Box p={20}>\n        <VStack alignItems=\"stretch\" spacing={5}>\n          <Box borderWidth={1} p={5} borderRadius=\"lg\">\n            <FormControl id=\"todo\">\n              <FormLabel>Что вы хотите сделать?</FormLabel>\n              <HStack>\n                <Input\n                  value={this.state.value}\n                  onChange={(e) => this.setState({ value: e.target.value })}\n                  placeholder=\"Ваша следующая задача...\"\n                />\n                <Button\n                  disabled={this.state.value.length === 0}\n                  onClick={this.handleAddTask}\n                >\n                  Добавить\n                </Button>\n              </HStack>\n            </FormControl>\n          </Box>\n          <Box borderWidth={1} p={5} borderRadius=\"lg\" bg=\"gray.100\">\n            <VStack alignItems=\"stretch\">\n              {this.state.tasks.map((task) => {\n                return (\n                  <Box\n                    key={task.id}\n                    borderWidth=\"1px\"\n                    backgroundColor=\"white\"\n                    borderRadius=\"lg\"\n                    p={3}\n                  >\n                    <HStack spacing={3}>\n                      <Checkbox\n                        size=\"lg\"\n                        onChange={(e) => this.handleToggleTask(e, task.id)}\n                      />\n                      <Text\n                        flex=\"1\"\n                        style={{\n                          textDecoration: task.completed && \"line-through\",\n                        }}\n                        fontSize=\"lg\"\n                      >\n                        {task.text}\n                      </Text>\n                      <Button onClick={() => this.handleDeleteTask(task.id)}>\n                        Удалить\n                      </Button>\n                    </HStack>\n                  </Box>\n                );\n              })}\n            </VStack>\n          </Box>\n        </VStack>\n      </Box>\n    );\n  }\n}\n\nexport default List;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ListFunc from \"./Functional\";\nimport ListClass from \"./Class\";\nimport { HashRouter, Route, NavLink } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { Box, HStack, Button } from \"@chakra-ui/react\";\n\nconst List = () => {\n  return (\n    <Box p={5} borderRadius=\"lg\">\n      <HStack spacing={3}>\n        <NavLink to=\"/functional\">\n          <Button>Functional</Button>\n        </NavLink>\n        <NavLink to=\"/class\">\n          <Button>Class</Button>\n        </NavLink>\n      </HStack>\n    </Box>\n  );\n};\n\nReactDOM.render(\n  <HashRouter>\n    <ChakraProvider>\n      <List />\n      <Route path=\"/functional\" component={ListFunc} />\n      <Route path=\"/class\" component={ListClass} />\n    </ChakraProvider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}